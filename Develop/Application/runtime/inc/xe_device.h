/*******************************************************************************
*文件说明：充电相关的头文件
*简要说明: 无
*版    本：V1.0
*时    间：2016年12月06日
********************************************************************************
*/
#ifndef __XE_DEVICE_H__
#define __XE_DEVICE_H__

#include "xe_global_variable.h"

/*******************************************************************************
*函数名:pack_login
*功  能:打包login消息
*入  参:p_client: 全局消息结构体指针
*返回值:无
*
*时  间:2016年12月06日
********************************************************************************
*/
void pack_login(xe_client_s *p_client);

/*******************************************************************************
*函数名:handle_login
*功  能:解包login消息，并保存相关数据到全局结构体中
*入  参:p_client: 全局消息结构体指针
*       p_msg_buf: 服务器消息的缓冲区
*       msg_len: 收到的消息体长度
*返回值:无
*
*时  间:2016年12月10日
********************************************************************************
*/
void handle_login(xe_client_s *p_client, UINT8 *p_msg_buf, UINT16 msg_len);

/*******************************************************************************
*函数名:pack_heart_beat
*功  能:打包CMD_HEART_BEAT消息
*入  参:p_client: 全局消息结构体指针
*返回值:无
*
*时  间:2016年12月13日
********************************************************************************
*/
void pack_heart_beat(xe_client_s *p_client);

/*******************************************************************************
*函数名:handle_heart_beat
*功  能:解包heart_beat消息，并保存相关数据到全局结构体中
*入  参:p_client: 全局消息结构体指针
*       p_msg_buf: 服务器消息的缓冲区
*       msg_len: 收到的消息体长度
*返回值:无
*
*时  间:2016年12月14日
********************************************************************************
*/
void handle_heart_beat(xe_client_s *p_client, UINT8 *p_msg_buf, UINT16 msg_len);

/*******************************************************************************
*函数名:pack_charge_record
*功  能:打包CMD_CHARGE_RECORD消息
*入  参:p_client: 全局消息结构体指针
*返回值:无
*
*时  间:2016年12月21日
********************************************************************************
*/
void pack_charge_record(xe_client_s *p_client);

/*******************************************************************************
*函数名:handle_charge_record
*功  能:解包CMD_CHARGE_RECORD消息，并保存相关数据到全局结构体中
*入  参:p_client: 全局消息结构体指针
*       p_msg_buf: 服务器消息的缓冲区
*       msg_len: 收到的消息体长度
*返回值:无
*
*时  间:2016年12月21日
********************************************************************************
*/
void handle_charge_record(xe_client_s *p_client, UINT8 *p_msg_buf, UINT16 msg_len);

/*******************************************************************************
*函数名:pack_order_pile
*功  能:打包CMD_ORDER_PILE消息
*入  参:p_client: 全局消息结构体指针
*返回值:无
*
*时  间:2016年12月21日
********************************************************************************
*/
void pack_order_pile(xe_client_s *p_client);

/*******************************************************************************
*函数名:handle_order_pile
*功  能:解包CMD_ORDER_PILE消息，并保存相关数据到全局结构体中
*入  参:p_client: 全局消息结构体指针
*       p_msg_buf: 服务器消息的缓冲区
*       msg_len: 收到的消息体长度
*返回值:无
*
*时  间:2016年12月21日
********************************************************************************
*/
void handle_order_pile(xe_client_s *p_client, UINT8 *p_msg_buf, UINT16 msg_len);

/*******************************************************************************
*函数名:pack_cancel_order
*功  能:打包CMD_CANCEL_ORDER消息
*入  参:p_client: 全局消息结构体指针
*返回值:无
*
*时  间:2016年12月22日
********************************************************************************
*/
void pack_cancel_order(xe_client_s *p_client);

/*******************************************************************************
*函数名:handle_cancel_order
*功  能:解包CMD_CANCEL_ORDER消息，并保存相关数据到全局结构体中
*入  参:p_client: 全局消息结构体指针
*       p_msg_buf: 服务器消息的缓冲区
*       msg_len: 收到的消息体长度
*返回值:无
*
*时  间:2016年12月22日
********************************************************************************
*/
void handle_cancel_order(xe_client_s *p_client, UINT8 *p_msg_buf, UINT16 msg_len);

/*******************************************************************************
*函数名:pack_start_charge
*功  能:打包CMD_START_CHARGE消息
*入  参:p_client: 全局消息结构体指针
*返回值:无
*
*时  间:2016年12月22日
********************************************************************************
*/
void pack_start_charge(xe_client_s *p_client);

/*******************************************************************************
*函数名:handle_start_charge
*功  能:解包CMD_START_CHARGE消息，并保存相关数据到全局结构体中
*入  参:p_client: 全局消息结构体指针
*       p_msg_buf: 服务器消息的缓冲区
*       msg_len: 收到的消息体长度
*返回值:无
*
*时  间:2016年12月22日
********************************************************************************
*/
void handle_start_charge(xe_client_s *p_client, UINT8 *p_msg_buf, UINT16 msg_len);

/*******************************************************************************
*函数名:pack_stop_charge
*功  能:打包CMD_STOP_CHARGE消息
*入  参:p_client: 全局消息结构体指针
*返回值:无
*
*时  间:2016年12月23日
********************************************************************************
*/
void pack_stop_charge(xe_client_s *p_client);

/*******************************************************************************
*函数名:handle_stop_charge
*功  能:解包CMD_STOP_CHARGE消息，并保存相关数据到全局结构体中
*入  参:p_client: 全局消息结构体指针
*       p_msg_buf: 服务器消息的缓冲区
*       msg_len: 收到的消息体长度
*返回值:无
*
*时  间:2016年12月23日
********************************************************************************
*/
void handle_stop_charge(xe_client_s *p_client, UINT8 *p_msg_buf, UINT16 msg_len);

/*******************************************************************************
*函数名:pack_time_sync
*功  能:打包CMD_TIME_SYNC消息
*入  参:p_client: 全局消息结构体指针
*返回值:无
*
*时  间:2016年12月23日
********************************************************************************
*/
void pack_time_sync(xe_client_s *p_client);

/*******************************************************************************
*函数名:handle_time_sync
*功  能:解包CMD_TIME_SYNC消息，并保存相关数据到全局结构体中
*入  参:p_client: 全局消息结构体指针
*       p_msg_buf: 服务器消息的缓冲区
*       msg_len: 收到的消息体长度
*返回值:无
*
*时  间:2016年12月23日
********************************************************************************
*/
void handle_time_sync(xe_client_s *p_client, UINT8 *p_msg_buf, UINT16 msg_len);

/*******************************************************************************
*函数名:pack_charge_price
*功  能:打包CMD_CHARGE_PRICE消息
*入  参:p_client: 全局消息结构体指针
*返回值:无
*
*时  间:2016年12月23日
********************************************************************************
*/
void pack_charge_price(xe_client_s *p_client);

/*******************************************************************************
*函数名:handle_charge_price
*功  能:解包CMD_CHARGE_PRICE消息，并保存相关数据到全局结构体中
*入  参:p_client: 全局消息结构体指针
*       p_msg_buf: 服务器消息的缓冲区
*       msg_len: 收到的消息体长度
*返回值:无
*
*时  间:2016年12月23日
********************************************************************************
*/
void handle_charge_price(xe_client_s *p_client, UINT8 *p_msg_buf, UINT16 msg_len);

/*******************************************************************************
*函数名:pack_report_card
*功  能:打包CMD_REPORT_CARD消息
*入  参:p_client: 全局消息结构体指针
*返回值:无
*
*时  间:2016年12月23日
********************************************************************************
*/
void pack_report_card(xe_client_s *p_client);

/*******************************************************************************
*函数名:handle_report_card
*功  能:解包CMD_REPORT_CARD消息，并保存相关数据到全局结构体中
*入  参:p_client: 全局消息结构体指针
*       p_msg_buf: 服务器消息的缓冲区
*       msg_len: 收到的消息体长度
*返回值:无
*
*时  间:2016年12月23日
********************************************************************************
*/
void handle_report_card(xe_client_s *p_client, UINT8 *p_msg_buf, UINT16 msg_len);

/*******************************************************************************
*函数名:handle_shut_down
*功  能:解包CMD_SHUT_DOWN消息，并保存相关数据到全局结构体中
*入  参:p_client: 全局消息结构体指针
*       p_msg_buf: 服务器消息的缓冲区
*       msg_len: 收到的消息体长度
*返回值:无
*
*时  间:2016年12月23日
********************************************************************************
*/
void handle_shut_down(xe_client_s *p_client, UINT8 *p_msg_buf, UINT16 msg_len);

/*******************************************************************************
*函数名:pack_gun_conn_check
*功  能:打包CMD_GUN_CONN_CHECK消息
*入  参:p_client: 全局消息结构体指针
*返回值:无
*
*时  间:2017年02月09日
********************************************************************************
*/
void pack_gun_conn_check(xe_client_s *p_client);

/*******************************************************************************
*函数名:handle_gun_conn_check
*功  能:解包CMD_GUN_CONN_CHECK消息，并保存相关数据到全局结构体中
*入  参:p_client: 全局消息结构体指针
*       p_msg_buf: 服务器消息的缓冲区
*       msg_len: 收到的消息体长度
*返回值:无
*
*时  间:2017年02月09日
********************************************************************************
*/
void handle_gun_conn_check(xe_client_s *p_client, UINT8 *p_msg_buf, UINT16 msg_len);

/*******************************************************************************
*函数名:pack_offline_charge
*功  能:打包CMD_OFFLINE_CHARGE消息
*入  参:p_client: 全局消息结构体指针
*返回值:无
*
*时  间:2017年02月10日
********************************************************************************
*/
void pack_offline_charge(xe_client_s *p_client);

/*******************************************************************************
*函数名:handle_offline_charge
*功  能:解包CMD_OFFLINE_CHARGE消息，并保存相关数据到全局结构体中
*入  参:p_client: 全局消息结构体指针
*       p_msg_buf: 服务器消息的缓冲区
*       msg_len: 收到的消息体长度
*返回值:无
*
*时  间:2017年02月10日
********************************************************************************
*/
void handle_offline_charge(xe_client_s *p_client, UINT8 *p_msg_buf, UINT16 msg_len);

#endif
